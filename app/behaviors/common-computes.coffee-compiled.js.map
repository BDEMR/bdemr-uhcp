{"version":3,"sources":["common-computes.coffee","common-computes.js"],"names":["slice","indexOf","item","i","l","this","length","app","behaviors","commonComputes","$equals","left","right","$if","value","thenValue","elseValue","$iff","$sum","a","b","$and","$truncate","string","maxCount","substr","$mkDate","date","lib","datetime","mkDate","$formatCurrency","num","isNaN","parseFloat","toLocaleString","style","currency","currencyDisplay","maximumSignificantDigits","$formatNumber","$compareFn","op","$mkDateTime","Date","now","$mkTime","ms","format","$formatDate","formatObj","timeZone","day","month","year","$formatDateTime","dateTime","hour","minute","$in","list","arguments","call","$returnSerial","index","$isEmptyArray","data","$toTwoDecimalPlace","number","Number","toFixed","$getFullName","first","honorifics","last","middle","$makeNameObject","fullName","nameObject","namePart","partArray","trim","split","pop","join","shift","$getProfileImage","$checkUserAccess","accessId","currentOrganization","len","privilege","privilegeList","getCurrentOrganization","isCurrentUserAnAdmin","isCurrentUserAMember","userActiveRole","serial","$computeAge","dateString","age","birthDate","m","today","getFullYear","getMonth","getDate","$getPatientServiceBalance","patientId","cbfn","apiKey","user","callApi","_this","err","response","domHost","showModalDialog","hasError","showWarningToast","error","message","outdoorBalance","indoorBalance","window","sessionStorage","setItem"],"mappings":"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","file":"common-computes.coffee-compiled.js","sourcesContent":["\r\napp.behaviors.commonComputes = \r\n\r\n  $equals: (left, right)-> left is right\r\n\r\n  $if: (value, thenValue, elseValue)-> if value then thenValue else elseValue\r\n\r\n  $iff: (value)-> value\r\n\r\n  $sum: (a,b)-> a + b\r\n\r\n  $and: (a,b)-> a and b\r\n\r\n  $truncate: (string, maxCount)->\r\n    return string if string.length <= maxCount\r\n    return (string.substr 0, (maxCount - 3)) + '...'\r\n\r\n  $mkDate: (date)-> \r\n    return '' unless date\r\n    lib.datetime.mkDate date\r\n\r\n  $formatCurrency: (num = 0)->\r\n    return 0 if (isNaN(parseFloat num))\r\n    return num.toLocaleString 'en-IN', { style: 'currency', currency: 'BDT', currencyDisplay: 'symbol', maximumSignificantDigits: 21}\r\n\r\n  $formatNumber: (num = 0)->\r\n    return 0 if (isNaN(parseFloat num))\r\n    return num.toLocaleString 'en-IN'\r\n\r\n  $compareFn: (left, op, right)->\r\n    if (op=='<')\r\n      return left < right\r\n    if (op=='>')\r\n      return left > right\r\n    if (op=='==')\r\n      return left == right\r\n    if (op=='>=')\r\n      return left >= right\r\n    if (op=='<=')\r\n      return left <= right\r\n\r\n  $mkDateTime: ()-> Date.now()\r\n\r\n  $mkTime: (ms)-> lib.datetime.format((new Date ms), 'HH-MM-ss')\r\n\r\n  $formatDate: (date)->\r\n    return '' unless date\r\n    formatObj = { \r\n      timeZone: 'Asia/Dhaka' \r\n      day: 'numeric'\r\n      month: 'short'\r\n      year: 'numeric'\r\n    }\r\n    return new Date(date).toLocaleString('en-GB', formatObj)\r\n\r\n\r\n  $formatDateTime: (dateTime)->\r\n    return '' unless dateTime\r\n    formatObj = { \r\n      timeZone: 'Asia/Dhaka' \r\n      day: 'numeric'\r\n      month: 'short'\r\n      year: 'numeric'\r\n      hour: '2-digit'\r\n      minute: '2-digit'\r\n    }\r\n    # lib.datetime.format((new Date dateTime), 'mmm d, yyyy h:MMTT')\r\n    return new Date(dateTime).toLocaleString('en-IN', formatObj)\r\n\r\n  $in: (item, list...)->\r\n    item in list\r\n\r\n  $returnSerial: (index)->\r\n    index+1\r\n\r\n  $isEmptyArray: (data)->\r\n    if data is 0\r\n      return true\r\n    else\r\n      return false\r\n\r\n  $toTwoDecimalPlace: (number)-> \r\n    return if isNaN(number)\r\n    return Number.parseFloat(number).toFixed(2)\r\n\r\n  $getFullName:(data)->\r\n\r\n    if typeof data is \"object\"\r\n      honorifics = ''\r\n      first = ''\r\n      last = ''\r\n      middle = ''\r\n\r\n      if data.honorifics  \r\n        honorifics = data.honorifics + \". \"\r\n      if data.first\r\n        first = data.first\r\n      if data.middle\r\n        middle = \" \" + data.middle\r\n      if data.last\r\n        last = \" \" + data.last\r\n        \r\n      return honorifics + first + middle + last\r\n\r\n    else return data\r\n\r\n\r\n  $makeNameObject: (fullName)->\r\n\r\n    if typeof fullName is 'string'\r\n\r\n      fullName = fullName.trim()\r\n\r\n      partArray = fullName.split('.')\r\n\r\n      namePart = partArray.pop()\r\n\r\n      if partArray.length is 0 \r\n        honorifics = ''\r\n      else\r\n        honorifics = partArray.join('.').trim()\r\n\r\n      partArray = (namePart.trim()).split(' ')\r\n\r\n      nameObject = {}\r\n\r\n      if (partArray.length <= 1)\r\n        first = partArray[0]\r\n      else\r\n        first = partArray.shift()\r\n        last = partArray.pop()\r\n        middle = partArray.join(' ')\r\n\r\n        if middle is ''\r\n          middle = null\r\n        \r\n        if last is ''\r\n          last = null\r\n\r\n      if honorifics is ''\r\n        honorifics = null\r\n\r\n      nameObject.honorifics = honorifics\r\n      nameObject.first = first\r\n      nameObject.middle = middle\r\n      nameObject.last = last\r\n      return nameObject\r\n    else\r\n      return fullName\r\n\r\n\r\n  $getProfileImage: (data)->\r\n    if data\r\n      return data\r\n    else\r\n      return 'images/avatar.png'\r\n\r\n  $checkUserAccess: (accessId)->\r\n    currentOrganization = @getCurrentOrganization()\r\n\r\n    if accessId is 'none'\r\n      return true\r\n    else\r\n      if currentOrganization\r\n\r\n        if currentOrganization.isCurrentUserAnAdmin\r\n          return true\r\n        else if currentOrganization.isCurrentUserAMember\r\n          if currentOrganization.userActiveRole\r\n            privilegeList = currentOrganization.userActiveRole.privilegeList\r\n            unless privilegeList.length is 0\r\n              for privilege in privilegeList\r\n                if privilege.serial is accessId\r\n                  return true\r\n          else\r\n            return true\r\n\r\n          return false\r\n        else\r\n          return false\r\n\r\n      else\r\n        # @navigateToPage \"#/select-organization\"\r\n        return true\r\n\r\n  $computeAge: (dateString)->\r\n    return '' unless dateString\r\n    today = new Date()\r\n    birthDate = new Date dateString\r\n    age = today.getFullYear() - birthDate.getFullYear()\r\n    m = today.getMonth() - birthDate.getMonth()\r\n    if m < 0 || (m == 0 && today.getDate() < birthDate.getDate())\r\n      age--\r\n    return age\r\n      \r\n\r\n\r\n  $getPatientServiceBalance: (patientId, cbfn)->\r\n    data = {\r\n      patientId: patientId\r\n      apiKey: @user.apiKey\r\n    }\r\n    @callApi '/bdemr-uhcp--get-patient-service-value', data, (err, response)=>\r\n      if err  \r\n        @domHost.showModalDialog 'Could not connect to Server'\r\n      if response.hasError\r\n        @domHost.showWarningToast response.error.message\r\n        return cbfn {outdoorBalance:0, indoorBalance:0}\r\n      else\r\n        if response.data.length\r\n          window.sessionStorage.setItem 'wallet-balance', response.data[0].outdoorBalance\r\n          cbfn response.data[0]\r\n        else\r\n          cbfn {outdoorBalance:0, indoorBalance:0}\r\n","(function() {\n  var slice = [].slice,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  app.behaviors.commonComputes = {\n    $equals: function(left, right) {\n      return left === right;\n    },\n    $if: function(value, thenValue, elseValue) {\n      if (value) {\n        return thenValue;\n      } else {\n        return elseValue;\n      }\n    },\n    $iff: function(value) {\n      return value;\n    },\n    $sum: function(a, b) {\n      return a + b;\n    },\n    $and: function(a, b) {\n      return a && b;\n    },\n    $truncate: function(string, maxCount) {\n      if (string.length <= maxCount) {\n        return string;\n      }\n      return (string.substr(0, maxCount - 3)) + '...';\n    },\n    $mkDate: function(date) {\n      if (!date) {\n        return '';\n      }\n      return lib.datetime.mkDate(date);\n    },\n    $formatCurrency: function(num) {\n      if (num == null) {\n        num = 0;\n      }\n      if (isNaN(parseFloat(num))) {\n        return 0;\n      }\n      return num.toLocaleString('en-IN', {\n        style: 'currency',\n        currency: 'BDT',\n        currencyDisplay: 'symbol',\n        maximumSignificantDigits: 21\n      });\n    },\n    $formatNumber: function(num) {\n      if (num == null) {\n        num = 0;\n      }\n      if (isNaN(parseFloat(num))) {\n        return 0;\n      }\n      return num.toLocaleString('en-IN');\n    },\n    $compareFn: function(left, op, right) {\n      if (op === '<') {\n        return left < right;\n      }\n      if (op === '>') {\n        return left > right;\n      }\n      if (op === '==') {\n        return left === right;\n      }\n      if (op === '>=') {\n        return left >= right;\n      }\n      if (op === '<=') {\n        return left <= right;\n      }\n    },\n    $mkDateTime: function() {\n      return Date.now();\n    },\n    $mkTime: function(ms) {\n      return lib.datetime.format(new Date(ms), 'HH-MM-ss');\n    },\n    $formatDate: function(date) {\n      var formatObj;\n      if (!date) {\n        return '';\n      }\n      formatObj = {\n        timeZone: 'Asia/Dhaka',\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      };\n      return new Date(date).toLocaleString('en-GB', formatObj);\n    },\n    $formatDateTime: function(dateTime) {\n      var formatObj;\n      if (!dateTime) {\n        return '';\n      }\n      formatObj = {\n        timeZone: 'Asia/Dhaka',\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateTime).toLocaleString('en-IN', formatObj);\n    },\n    $in: function() {\n      var item, list;\n      item = arguments[0], list = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      return indexOf.call(list, item) >= 0;\n    },\n    $returnSerial: function(index) {\n      return index + 1;\n    },\n    $isEmptyArray: function(data) {\n      if (data === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    $toTwoDecimalPlace: function(number) {\n      if (isNaN(number)) {\n        return;\n      }\n      return Number.parseFloat(number).toFixed(2);\n    },\n    $getFullName: function(data) {\n      var first, honorifics, last, middle;\n      if (typeof data === \"object\") {\n        honorifics = '';\n        first = '';\n        last = '';\n        middle = '';\n        if (data.honorifics) {\n          honorifics = data.honorifics + \". \";\n        }\n        if (data.first) {\n          first = data.first;\n        }\n        if (data.middle) {\n          middle = \" \" + data.middle;\n        }\n        if (data.last) {\n          last = \" \" + data.last;\n        }\n        return honorifics + first + middle + last;\n      } else {\n        return data;\n      }\n    },\n    $makeNameObject: function(fullName) {\n      var first, honorifics, last, middle, nameObject, namePart, partArray;\n      if (typeof fullName === 'string') {\n        fullName = fullName.trim();\n        partArray = fullName.split('.');\n        namePart = partArray.pop();\n        if (partArray.length === 0) {\n          honorifics = '';\n        } else {\n          honorifics = partArray.join('.').trim();\n        }\n        partArray = (namePart.trim()).split(' ');\n        nameObject = {};\n        if (partArray.length <= 1) {\n          first = partArray[0];\n        } else {\n          first = partArray.shift();\n          last = partArray.pop();\n          middle = partArray.join(' ');\n          if (middle === '') {\n            middle = null;\n          }\n          if (last === '') {\n            last = null;\n          }\n        }\n        if (honorifics === '') {\n          honorifics = null;\n        }\n        nameObject.honorifics = honorifics;\n        nameObject.first = first;\n        nameObject.middle = middle;\n        nameObject.last = last;\n        return nameObject;\n      } else {\n        return fullName;\n      }\n    },\n    $getProfileImage: function(data) {\n      if (data) {\n        return data;\n      } else {\n        return 'images/avatar.png';\n      }\n    },\n    $checkUserAccess: function(accessId) {\n      var currentOrganization, i, len, privilege, privilegeList;\n      currentOrganization = this.getCurrentOrganization();\n      if (accessId === 'none') {\n        return true;\n      } else {\n        if (currentOrganization) {\n          if (currentOrganization.isCurrentUserAnAdmin) {\n            return true;\n          } else if (currentOrganization.isCurrentUserAMember) {\n            if (currentOrganization.userActiveRole) {\n              privilegeList = currentOrganization.userActiveRole.privilegeList;\n              if (privilegeList.length !== 0) {\n                for (i = 0, len = privilegeList.length; i < len; i++) {\n                  privilege = privilegeList[i];\n                  if (privilege.serial === accessId) {\n                    return true;\n                  }\n                }\n              }\n            } else {\n              return true;\n            }\n            return false;\n          } else {\n            return false;\n          }\n        } else {\n          return true;\n        }\n      }\n    },\n    $computeAge: function(dateString) {\n      var age, birthDate, m, today;\n      if (!dateString) {\n        return '';\n      }\n      today = new Date();\n      birthDate = new Date(dateString);\n      age = today.getFullYear() - birthDate.getFullYear();\n      m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      return age;\n    },\n    $getPatientServiceBalance: function(patientId, cbfn) {\n      var data;\n      data = {\n        patientId: patientId,\n        apiKey: this.user.apiKey\n      };\n      return this.callApi('/bdemr-uhcp--get-patient-service-value', data, (function(_this) {\n        return function(err, response) {\n          if (err) {\n            _this.domHost.showModalDialog('Could not connect to Server');\n          }\n          if (response.hasError) {\n            _this.domHost.showWarningToast(response.error.message);\n            return cbfn({\n              outdoorBalance: 0,\n              indoorBalance: 0\n            });\n          } else {\n            if (response.data.length) {\n              window.sessionStorage.setItem('wallet-balance', response.data[0].outdoorBalance);\n              return cbfn(response.data[0]);\n            } else {\n              return cbfn({\n                outdoorBalance: 0,\n                indoorBalance: 0\n              });\n            }\n          }\n        };\n      })(this));\n    }\n  };\n\n}).call(this);\n"]}