{"version":3,"sources":["db-using.coffee","db-using.js"],"names":["app","behaviors","dbUsing","_locateItem","path","context","first","head","maybeNewContext","newContext","originalVirtualChildName","virtualChildName","length","shift","forKey","childMap","this","virtualChildMap","split","pop","join","locateItem","stringPath","record","ex","obj","unshift","data","error","safeExtractItem","item","safeExtractInput","alternativeValue","value","isUserLoggedIn","userList","db","find","apiKey","Error","removeAllUserInfo","i","j","k","len","len1","len2","ref","ref1","ref2","results","remove","_id","push","removeUserUnlessSessionIsPersistent","persistentSessionList","shouldRememberUser","lib","tabStorage","getItem","json","parse","loginDbAction","user","persistentSession","previousUser","serialGenerator","serial","removeExistingDatabase","window","localStorage","clear","initializeDatabase","insert","patient-seed","offline-patient-serial-seed","doctor-visit-seed","doctor-pcc-seed","doctor-ndr-seed","doctor-visit-prescription-seed","doctor-visit-note-seed","doctor-patient-stay-seed","doctor-visit-next-visit-seed","doctor-visit-test-advise-seed","doctor-advised-test-seed","doctor-visit-examination-seed","doctor-visit-identified-symptoms-seed","doctor-visit-custom-symptoms-seed","doctor-visit-custom-examination-seed","anaesmon-record-seed","history-physical-record-seed","medication-record-seed","favorite-medicine-seed","favorite-investigation-seed","vital-record-seed","vital-comment-thread-seed","vital-comment-message-seed","custom-investigation-name-seed","user-added-institution-list-seed","attachment-record-seed","user-setting-record-seed","activity-seed","invoice-seed","diagnosis-seed","visited-patient-log","diag-patient-log","org-role-item-log","referral-seed","inventory-seed","third-party-user-seed","organization-price-list","setItem","stringify","skipWelcomePage","welcomePageViewed","getDashboardMetrics","dt","metrics","now","Date","accountExpiresOnDate","datetime","mkDate","daysLeft","Math","floor","diff","getCurrentUser","getCurrentUserSerial","getCurrentOrganization","generateSerialForPatient","appIdentifier","itemType","patientSeed","sessionSerial","userSerial","update","generateSerialForVisit","seed","generateSerialForRecord","generateSerialForHistoryAndPhysical","generateSerialForPrescription","generateSerialForNote","generateSerialForPatientStay","generateSerialForNextVisit","generateSerialForTestAdvised","generateSerialForIdentifiedSymptoms","generateSerialForExamination","generateSerialForCustomSymptoms","generateSerialForCustomExamination","generateSerialForTestAdvisedInvestigation","generateSerialForCustomInvestigation","generateSerialForMedication","generateSerialForFavoriteMedicine","generateSerialForFavoriteInvestigation","generateSerialForVitals","forItem","generateSerialForCommentMessage","generateSerialForUserAddedInstituion","generateSerialForAttachmentBlob","generateSerialForAttachmentSync","generateSerialForSettings","generateSerialForActivity","generateSerialForinvoice","generateSerialForDiagnosis","generateSerialForVisitedPatientLog","generateSerialForOrgRole","generateSerialForPccRecord","generateSerialForNdrRecord","generateSerialForEmployeeLeaveData","generateSerialForReferral","generateSerialForInvoiceCategory","generateSerialForThirdPartyUser","generateSerialForInventoryItem","generateSerialForPriceListItem","generateSerialCustomCategory","generateSerialForOfflinePatient","call"],"mappings":"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","file":"db-using.coffee-compiled.js","sourcesContent":["\r\napp.behaviors.dbUsing =\r\n ## DATA EXTRACTION START ================\r\n\r\n  _locateItem: (path, context)->\r\n    # console.log context\r\n\r\n    return context if path.length is 0\r\n\r\n    head = path.shift()\r\n    return null if head isnt context.forKey\r\n\r\n    return context if path.length is 0\r\n    \r\n    first = path[0]\r\n    if 'childMap' of context and first of context.childMap\r\n      newContext = context.childMap[first]\r\n      return @_locateItem path, newContext\r\n    else if 'virtualChildMap' of context\r\n      newContext = null\r\n      for originalVirtualChildName of context.virtualChildMap\r\n        virtualChildName = originalVirtualChildName\r\n        virtualChildName = virtualChildName.split '_'\r\n        virtualChildName.pop()\r\n        virtualChildName.shift()\r\n        virtualChildName = virtualChildName.join '_'\r\n\r\n        console.log 'virtualChildName', virtualChildName\r\n        console.log 'first', first        \r\n        console.log 'context.virtualChildMap', context.virtualChildMap\r\n        console.log 'originalVirtualChildName', originalVirtualChildName\r\n\r\n        maybeNewContext = context.virtualChildMap[originalVirtualChildName]\r\n        if @_locateItem path, maybeNewContext\r\n          newContext = maybeNewContext\r\n          break\r\n      if newContext is null\r\n        return false\r\n      else\r\n        return @_locateItem path, newContext\r\n    else\r\n      return false\r\n\r\n  locateItem: (stringPath, record = null)->\r\n    if record is null\r\n      record = @record\r\n    \r\n    path = (stringPath.split '//')\r\n    head = path.shift()\r\n    if head in [ 'preopAssessment', 'opAnaesthesia', 'opSurgery', 'postopAnalysis', 'postopAssessment', 'progressNote' ]\r\n      path.unshift \"systemRoot\"\r\n\r\n      obj = try record.data catch ex then null\r\n      return (if obj then @_locateItem path, obj else null)\r\n    else\r\n      console.log 'CANT FIND MY WAY'\r\n\r\n  safeExtractItem: (path, record = null)->\r\n    item = @locateItem path, record\r\n    return (if item then item else null)      \r\n\r\n  safeExtractInput: (path, alternativeValue, record = null)->\r\n    item = @locateItem path, record\r\n    return (if item then item.value else alternativeValue)\r\n\r\n  ## DATA EXTRACTION END ================ \r\n\r\n  isUserLoggedIn: ->\r\n    userList = app.db.find 'user'\r\n    if (userList.length is 0) or (not userList[0].apiKey)\r\n      return false\r\n    else if userList.length is 1\r\n      return true\r\n    else\r\n      throw new Error 'More than one active user'\r\n\r\n  removeAllUserInfo: ->\r\n    app.db.remove 'user', item._id for item in app.db.find 'user'\r\n    app.db.remove '--persistent-session', item._id for item in app.db.find '--persistent-session'\r\n    app.db.remove '--serial-generator', item._id for item in app.db.find '--serial-generator'\r\n    \r\n    \r\n  removeUserUnlessSessionIsPersistent: ->\r\n    userList = app.db.find 'user'\r\n    persistentSessionList = app.db.find '--persistent-session'\r\n\r\n    if userList.length is 1 and persistentSessionList.length is 1\r\n      if persistentSessionList[0].shouldRememberUser isnt true\r\n        item = lib.tabStorage.getItem 'is-tab-authenticated'\r\n        if item\r\n          if (lib.json.parse item) is false\r\n            @removeAllUserInfo()\r\n        else\r\n          @removeAllUserInfo()\r\n\r\n  loginDbAction: (user, shouldRememberUser) ->\r\n    previousUser = (app.db.find 'user')[0]\r\n    @removeAllUserInfo()\r\n    \r\n    if previousUser \r\n      unless user.serial is previousUser.serial\r\n        app.db.removeExistingDatabase()\r\n        window.localStorage.clear()\r\n        app.db.initializeDatabase()\r\n    \r\n    app.db.insert 'user', user\r\n\r\n    persistentSession = \r\n      shouldRememberUser: shouldRememberUser\r\n    app.db.insert '--persistent-session', persistentSession\r\n\r\n    serialGenerator = \r\n      'patient-seed': 0\r\n      'offline-patient-serial-seed': 1\r\n      'doctor-visit-seed': 0\r\n      'doctor-pcc-seed': 1\r\n      'doctor-ndr-seed': 1\r\n      'doctor-visit-prescription-seed': 0\r\n      'doctor-visit-note-seed': 0\r\n      'doctor-patient-stay-seed': 0\r\n      'doctor-visit-next-visit-seed': 0\r\n      'doctor-visit-test-advise-seed': 0\r\n      'doctor-advised-test-seed': 0\r\n      'doctor-visit-examination-seed': 0\r\n      'doctor-visit-identified-symptoms-seed': 1\r\n      'doctor-visit-custom-symptoms-seed': 1\r\n      'doctor-visit-custom-examination-seed': 1\r\n      'anaesmon-record-seed': 0\r\n      'history-physical-record-seed': 1\r\n      'medication-record-seed': 0\r\n      'favorite-medicine-seed': 0\r\n      'favorite-investigation-seed': 0\r\n      'vital-record-seed': 0\r\n      'vital-comment-thread-seed': 0\r\n      'vital-comment-message-seed': 0\r\n      'custom-investigation-name-seed': 0\r\n      'user-added-institution-list-seed': 0\r\n      'attachment-record-seed': 0\r\n      'user-setting-record-seed': 0\r\n      'activity-seed': 0\r\n      'invoice-seed': 1\r\n      'diagnosis-seed': 1\r\n      'visited-patient-log': 0\r\n      'diag-patient-log': 0\r\n      'org-role-item-log': 1\r\n      'referral-seed': 1\r\n      'inventory-seed': 1\r\n      'third-party-user-seed': 1\r\n      'organization-price-list': 1\r\n    app.db.insert '--serial-generator', serialGenerator\r\n\r\n    lib.tabStorage.setItem 'is-tab-authenticated', (lib.json.stringify true)\r\n\r\n  skipWelcomePage: ->\r\n    welcomePageViewed = lib.localStorage.getItem 'welcomePageViewed'\r\n    if welcomePageViewed\r\n      return true\r\n    return false\r\n  \r\n  getDashboardMetrics: ->\r\n\r\n    metrics = {}\r\n\r\n    ## NOTE newPatientCount\r\n    # patientList = app.db.find 'patient-list', ({createdDatetimeStamp})-> \r\n    #   lhs = lib.datetime.mkDate (new Date createdDatetimeStamp)\r\n    #   rhs = lib.datetime.mkDate lib.datetime.now()\r\n    #   return (lhs is rhs)\r\n    # metrics.newPatientCount = patientList.length\r\n\r\n    ## NOTE totalPatientCount\r\n    # metrics.totalPatientCount = (app.db.find 'patient-list').length\r\n\r\n    ## NOTE newVisitCount\r\n    # metrics.newVisitCount = 0\r\n\r\n    ## NOTE totalVisitCount\r\n    # metrics.totalVisitCount = 0\r\n\r\n    ## NOTE totalUnpaidInvoiceCount\r\n    # metrics.totalUnpaidInvoiceCount = 0\r\n\r\n    ## NOTE daysLeft\r\n    user = (app.db.find 'user')[0]\r\n    dt = new Date user.accountExpiresOnDate\r\n    now = new Date lib.datetime.mkDate lib.datetime.now()\r\n    metrics.daysLeft = Math.floor ((lib.datetime.diff dt, now) / 1000 / 60 / 60 / 24)\r\n\r\n    return metrics\r\n\r\n  getCurrentUser: -> (app.db.find 'user')[0]\r\n  getCurrentUserSerial: -> (app.db.find 'user')[0].serial\r\n  getCurrentOrganization: -> (app.db.find 'organization')[0]\r\n\r\n  generateSerialForPatient: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'P'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    patientSeed = serialGenerator['patient-seed']\r\n    serialGenerator['patient-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + patientSeed)\r\n\r\n  generateSerialForVisit: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'V'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-seed']\r\n    serialGenerator['doctor-visit-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForRecord: ->\r\n    appIdentifier = 'A'\r\n    itemType = 'R'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['anaesmon-record-seed']\r\n    serialGenerator['anaesmon-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForHistoryAndPhysical: ->\r\n    appIdentifier = 'A'\r\n    itemType = 'R'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['history-physical-record-seed']\r\n    serialGenerator['history-physical-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    console.log (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n\r\n  generateSerialForPrescription: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'PR'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-prescription-seed']\r\n    serialGenerator['doctor-visit-prescription-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForNote: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'NT'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-note-seed']\r\n    serialGenerator['doctor-visit-note-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n\r\n  generateSerialForPatientStay: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'PS'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-patient-stay-seed']\r\n    serialGenerator['doctor-patient-stay-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForNextVisit: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'NV'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-next-visit-seed']\r\n    serialGenerator['doctor-visit-next-visit-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForTestAdvised: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'TA'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-test-advise-seed']\r\n    serialGenerator['doctor-visit-test-advise-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForIdentifiedSymptoms: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'SYMP'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-identified-symptoms-seed']\r\n    serialGenerator['doctor-visit-identified-symptoms-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForExamination: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'EXM'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-examination-seed']\r\n    serialGenerator['doctor-visit-examination-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n    \r\n\r\n  generateSerialForCustomSymptoms: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'CSYMP'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-custom-symptoms-seed']\r\n    serialGenerator['doctor-visit-custom-symptoms-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForCustomExamination: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'CEXM'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-custom-examination-seed']\r\n    serialGenerator['doctor-visit-custom-examination-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForTestAdvisedInvestigation: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'TST'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-test-advise-seed']\r\n    serialGenerator['doctor-visit-test-advise-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForCustomInvestigation: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'TA'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-visit-test-advise-seed']\r\n    serialGenerator['doctor-visit-test-advise-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForMedication: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'M'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['medication-record-seed']\r\n    serialGenerator['medication-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForFavoriteMedicine: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'FM'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['favorite-medicine-seed']\r\n    serialGenerator['favorite-medicine-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForFavoriteInvestigation: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'FI'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['favorite-investigation-seed']\r\n    serialGenerator['favorite-investigation-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForVitals: (forItem)->\r\n    appIdentifier = 'U'\r\n    itemType = 'V'\r\n    forItem = forItem\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['vital-record-seed']\r\n    serialGenerator['vital-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + forItem + seed)\r\n\r\n\r\n  generateSerialForCommentMessage: (forItem)->\r\n    appIdentifier = 'U'\r\n    itemType = 'U'\r\n    forItem = forItem\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['vital-comment-message-seed']\r\n    serialGenerator['vital-comment-message-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + forItem + seed)\r\n\r\n\r\n  generateSerialForUserAddedInstituion: (forItem)->\r\n    appIdentifier = 'U'\r\n    itemType = 'UI'\r\n    forItem = forItem\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['user-added-institution-list-seed']\r\n    serialGenerator['user-added-institution-list-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + forItem + seed)\r\n\r\n  generateSerialForAttachmentBlob: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'AttBlob'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['attachment-record-seed']\r\n    serialGenerator['attachment-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n  \r\n  generateSerialForAttachmentSync: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'AttSync'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['attachment-record-seed']\r\n    serialGenerator['attachment-record-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForSettings: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'Setting'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    return (appIdentifier + userSerial + itemType )\r\n\r\n  generateSerialForActivity: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'Act'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['activity-seed']\r\n    serialGenerator['activity-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n\r\n  generateSerialForinvoice: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'Inv'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['invoice-seed']\r\n    serialGenerator['invoice-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForDiagnosis: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'Dg'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['diagnosis-seed']\r\n    serialGenerator['diagnosis-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForVisitedPatientLog: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'VP'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['visited-patient-log']\r\n    serialGenerator['visited-patient-log'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForOrgRole: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'R'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['org-role-item-log']\r\n    serialGenerator['org-role-item-log'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForPccRecord: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'PCC'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-pcc-seed']\r\n    console.log 'seed', seed\r\n    serialGenerator['doctor-pcc-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForNdrRecord: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'NDR'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['doctor-ndr-seed']\r\n    console.log 'seed', seed\r\n    serialGenerator['doctor-ndr-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForEmployeeLeaveData: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'EL'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    return (appIdentifier + userSerial + itemType )\r\n\r\n\r\n  generateSerialForReferral: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'ref'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['referral-seed']\r\n    serialGenerator['referral-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForInvoiceCategory: ()->\r\n    appIdentifier = 'U'\r\n    itemType = 'IC'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    return (appIdentifier + userSerial + itemType + 'only')\r\n\r\n  generateSerialForThirdPartyUser: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'TPU'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['third-party-user-seed']\r\n    serialGenerator['third-party-user-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForInventoryItem: ->\r\n    appIdentifier = 'U'\r\n    itemType = 'Inventory'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['inventory-seed']\r\n    serialGenerator['inventory-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n  generateSerialForPriceListItem: ()->\r\n    appIdentifier = 'U'\r\n    itemType = 'PL'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['organization-price-list']\r\n    serialGenerator['organization-price-list'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n  \r\n  generateSerialCustomCategory: ()->\r\n    appIdentifier = 'C'\r\n    itemType = 'UC'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    return (appIdentifier + userSerial + itemType + 'only')\r\n\r\n  generateSerialForOfflinePatient: ->\r\n    appIdentifier = 'D'\r\n    itemType = 'OFFPT'\r\n    { serial: userSerial, sessionSerial } = (app.db.find 'user')[0]\r\n    serialGenerator = (app.db.find '--serial-generator')[0]\r\n    seed = serialGenerator['offline-patient-serial-seed']\r\n    serialGenerator['offline-patient-serial-seed'] += 1\r\n    app.db.update '--serial-generator', serialGenerator._id, serialGenerator\r\n    return (appIdentifier + userSerial + sessionSerial + itemType + seed)\r\n\r\n\r\n\r\n","(function() {\n  app.behaviors.dbUsing = {\n    _locateItem: function(path, context) {\n      var first, head, maybeNewContext, newContext, originalVirtualChildName, virtualChildName;\n      if (path.length === 0) {\n        return context;\n      }\n      head = path.shift();\n      if (head !== context.forKey) {\n        return null;\n      }\n      if (path.length === 0) {\n        return context;\n      }\n      first = path[0];\n      if ('childMap' in context && first in context.childMap) {\n        newContext = context.childMap[first];\n        return this._locateItem(path, newContext);\n      } else if ('virtualChildMap' in context) {\n        newContext = null;\n        for (originalVirtualChildName in context.virtualChildMap) {\n          virtualChildName = originalVirtualChildName;\n          virtualChildName = virtualChildName.split('_');\n          virtualChildName.pop();\n          virtualChildName.shift();\n          virtualChildName = virtualChildName.join('_');\n          console.log('virtualChildName', virtualChildName);\n          console.log('first', first);\n          console.log('context.virtualChildMap', context.virtualChildMap);\n          console.log('originalVirtualChildName', originalVirtualChildName);\n          maybeNewContext = context.virtualChildMap[originalVirtualChildName];\n          if (this._locateItem(path, maybeNewContext)) {\n            newContext = maybeNewContext;\n            break;\n          }\n        }\n        if (newContext === null) {\n          return false;\n        } else {\n          return this._locateItem(path, newContext);\n        }\n      } else {\n        return false;\n      }\n    },\n    locateItem: function(stringPath, record) {\n      var ex, head, obj, path;\n      if (record == null) {\n        record = null;\n      }\n      if (record === null) {\n        record = this.record;\n      }\n      path = stringPath.split('//');\n      head = path.shift();\n      if (head === 'preopAssessment' || head === 'opAnaesthesia' || head === 'opSurgery' || head === 'postopAnalysis' || head === 'postopAssessment' || head === 'progressNote') {\n        path.unshift(\"systemRoot\");\n        obj = (function() {\n          try {\n            return record.data;\n          } catch (error) {\n            ex = error;\n            return null;\n          }\n        })();\n        return (obj ? this._locateItem(path, obj) : null);\n      } else {\n        return console.log('CANT FIND MY WAY');\n      }\n    },\n    safeExtractItem: function(path, record) {\n      var item;\n      if (record == null) {\n        record = null;\n      }\n      item = this.locateItem(path, record);\n      return (item ? item : null);\n    },\n    safeExtractInput: function(path, alternativeValue, record) {\n      var item;\n      if (record == null) {\n        record = null;\n      }\n      item = this.locateItem(path, record);\n      return (item ? item.value : alternativeValue);\n    },\n    isUserLoggedIn: function() {\n      var userList;\n      userList = app.db.find('user');\n      if ((userList.length === 0) || (!userList[0].apiKey)) {\n        return false;\n      } else if (userList.length === 1) {\n        return true;\n      } else {\n        throw new Error('More than one active user');\n      }\n    },\n    removeAllUserInfo: function() {\n      var i, item, j, k, len, len1, len2, ref, ref1, ref2, results;\n      ref = app.db.find('user');\n      for (i = 0, len = ref.length; i < len; i++) {\n        item = ref[i];\n        app.db.remove('user', item._id);\n      }\n      ref1 = app.db.find('--persistent-session');\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        item = ref1[j];\n        app.db.remove('--persistent-session', item._id);\n      }\n      ref2 = app.db.find('--serial-generator');\n      results = [];\n      for (k = 0, len2 = ref2.length; k < len2; k++) {\n        item = ref2[k];\n        results.push(app.db.remove('--serial-generator', item._id));\n      }\n      return results;\n    },\n    removeUserUnlessSessionIsPersistent: function() {\n      var item, persistentSessionList, userList;\n      userList = app.db.find('user');\n      persistentSessionList = app.db.find('--persistent-session');\n      if (userList.length === 1 && persistentSessionList.length === 1) {\n        if (persistentSessionList[0].shouldRememberUser !== true) {\n          item = lib.tabStorage.getItem('is-tab-authenticated');\n          if (item) {\n            if ((lib.json.parse(item)) === false) {\n              return this.removeAllUserInfo();\n            }\n          } else {\n            return this.removeAllUserInfo();\n          }\n        }\n      }\n    },\n    loginDbAction: function(user, shouldRememberUser) {\n      var persistentSession, previousUser, serialGenerator;\n      previousUser = (app.db.find('user'))[0];\n      this.removeAllUserInfo();\n      if (previousUser) {\n        if (user.serial !== previousUser.serial) {\n          app.db.removeExistingDatabase();\n          window.localStorage.clear();\n          app.db.initializeDatabase();\n        }\n      }\n      app.db.insert('user', user);\n      persistentSession = {\n        shouldRememberUser: shouldRememberUser\n      };\n      app.db.insert('--persistent-session', persistentSession);\n      serialGenerator = {\n        'patient-seed': 0,\n        'offline-patient-serial-seed': 1,\n        'doctor-visit-seed': 0,\n        'doctor-pcc-seed': 1,\n        'doctor-ndr-seed': 1,\n        'doctor-visit-prescription-seed': 0,\n        'doctor-visit-note-seed': 0,\n        'doctor-patient-stay-seed': 0,\n        'doctor-visit-next-visit-seed': 0,\n        'doctor-visit-test-advise-seed': 0,\n        'doctor-advised-test-seed': 0,\n        'doctor-visit-examination-seed': 0,\n        'doctor-visit-identified-symptoms-seed': 1,\n        'doctor-visit-custom-symptoms-seed': 1,\n        'doctor-visit-custom-examination-seed': 1,\n        'anaesmon-record-seed': 0,\n        'history-physical-record-seed': 1,\n        'medication-record-seed': 0,\n        'favorite-medicine-seed': 0,\n        'favorite-investigation-seed': 0,\n        'vital-record-seed': 0,\n        'vital-comment-thread-seed': 0,\n        'vital-comment-message-seed': 0,\n        'custom-investigation-name-seed': 0,\n        'user-added-institution-list-seed': 0,\n        'attachment-record-seed': 0,\n        'user-setting-record-seed': 0,\n        'activity-seed': 0,\n        'invoice-seed': 1,\n        'diagnosis-seed': 1,\n        'visited-patient-log': 0,\n        'diag-patient-log': 0,\n        'org-role-item-log': 1,\n        'referral-seed': 1,\n        'inventory-seed': 1,\n        'third-party-user-seed': 1,\n        'organization-price-list': 1\n      };\n      app.db.insert('--serial-generator', serialGenerator);\n      return lib.tabStorage.setItem('is-tab-authenticated', lib.json.stringify(true));\n    },\n    skipWelcomePage: function() {\n      var welcomePageViewed;\n      welcomePageViewed = lib.localStorage.getItem('welcomePageViewed');\n      if (welcomePageViewed) {\n        return true;\n      }\n      return false;\n    },\n    getDashboardMetrics: function() {\n      var dt, metrics, now, user;\n      metrics = {};\n      user = (app.db.find('user'))[0];\n      dt = new Date(user.accountExpiresOnDate);\n      now = new Date(lib.datetime.mkDate(lib.datetime.now()));\n      metrics.daysLeft = Math.floor((lib.datetime.diff(dt, now)) / 1000 / 60 / 60 / 24);\n      return metrics;\n    },\n    getCurrentUser: function() {\n      return (app.db.find('user'))[0];\n    },\n    getCurrentUserSerial: function() {\n      return (app.db.find('user'))[0].serial;\n    },\n    getCurrentOrganization: function() {\n      return (app.db.find('organization'))[0];\n    },\n    generateSerialForPatient: function() {\n      var appIdentifier, itemType, patientSeed, ref, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'P';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      patientSeed = serialGenerator['patient-seed'];\n      serialGenerator['patient-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + patientSeed;\n    },\n    generateSerialForVisit: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'V';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-seed'];\n      serialGenerator['doctor-visit-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForRecord: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'A';\n      itemType = 'R';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['anaesmon-record-seed'];\n      serialGenerator['anaesmon-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForHistoryAndPhysical: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'A';\n      itemType = 'R';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['history-physical-record-seed'];\n      serialGenerator['history-physical-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      console.log(appIdentifier + userSerial + sessionSerial + itemType + seed);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForPrescription: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'PR';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-prescription-seed'];\n      serialGenerator['doctor-visit-prescription-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForNote: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'NT';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-note-seed'];\n      serialGenerator['doctor-visit-note-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForPatientStay: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'PS';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-patient-stay-seed'];\n      serialGenerator['doctor-patient-stay-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForNextVisit: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'NV';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-next-visit-seed'];\n      serialGenerator['doctor-visit-next-visit-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForTestAdvised: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'TA';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-test-advise-seed'];\n      serialGenerator['doctor-visit-test-advise-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForIdentifiedSymptoms: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'SYMP';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-identified-symptoms-seed'];\n      serialGenerator['doctor-visit-identified-symptoms-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForExamination: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'EXM';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-examination-seed'];\n      serialGenerator['doctor-visit-examination-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForCustomSymptoms: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'CSYMP';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-custom-symptoms-seed'];\n      serialGenerator['doctor-visit-custom-symptoms-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForCustomExamination: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'CEXM';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-custom-examination-seed'];\n      serialGenerator['doctor-visit-custom-examination-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForTestAdvisedInvestigation: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'TST';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-test-advise-seed'];\n      serialGenerator['doctor-visit-test-advise-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForCustomInvestigation: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'TA';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-visit-test-advise-seed'];\n      serialGenerator['doctor-visit-test-advise-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForMedication: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'M';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['medication-record-seed'];\n      serialGenerator['medication-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForFavoriteMedicine: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'FM';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['favorite-medicine-seed'];\n      serialGenerator['favorite-medicine-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForFavoriteInvestigation: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'FI';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['favorite-investigation-seed'];\n      serialGenerator['favorite-investigation-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForVitals: function(forItem) {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'V';\n      forItem = forItem;\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['vital-record-seed'];\n      serialGenerator['vital-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + forItem + seed;\n    },\n    generateSerialForCommentMessage: function(forItem) {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'U';\n      forItem = forItem;\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['vital-comment-message-seed'];\n      serialGenerator['vital-comment-message-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + forItem + seed;\n    },\n    generateSerialForUserAddedInstituion: function(forItem) {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'UI';\n      forItem = forItem;\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['user-added-institution-list-seed'];\n      serialGenerator['user-added-institution-list-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + forItem + seed;\n    },\n    generateSerialForAttachmentBlob: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'AttBlob';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['attachment-record-seed'];\n      serialGenerator['attachment-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForAttachmentSync: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'AttSync';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['attachment-record-seed'];\n      serialGenerator['attachment-record-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForSettings: function() {\n      var appIdentifier, itemType, ref, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'Setting';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      return appIdentifier + userSerial + itemType;\n    },\n    generateSerialForActivity: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'Act';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['activity-seed'];\n      serialGenerator['activity-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForinvoice: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'Inv';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['invoice-seed'];\n      serialGenerator['invoice-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForDiagnosis: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'Dg';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['diagnosis-seed'];\n      serialGenerator['diagnosis-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForVisitedPatientLog: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'VP';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['visited-patient-log'];\n      serialGenerator['visited-patient-log'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForOrgRole: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'R';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['org-role-item-log'];\n      serialGenerator['org-role-item-log'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForPccRecord: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'PCC';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-pcc-seed'];\n      console.log('seed', seed);\n      serialGenerator['doctor-pcc-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForNdrRecord: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'NDR';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['doctor-ndr-seed'];\n      console.log('seed', seed);\n      serialGenerator['doctor-ndr-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForEmployeeLeaveData: function() {\n      var appIdentifier, itemType, ref, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'EL';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      return appIdentifier + userSerial + itemType;\n    },\n    generateSerialForReferral: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'ref';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['referral-seed'];\n      serialGenerator['referral-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForInvoiceCategory: function() {\n      var appIdentifier, itemType, ref, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'IC';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      return appIdentifier + userSerial + itemType + 'only';\n    },\n    generateSerialForThirdPartyUser: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'TPU';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['third-party-user-seed'];\n      serialGenerator['third-party-user-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForInventoryItem: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'Inventory';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['inventory-seed'];\n      serialGenerator['inventory-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialForPriceListItem: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'U';\n      itemType = 'PL';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['organization-price-list'];\n      serialGenerator['organization-price-list'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    },\n    generateSerialCustomCategory: function() {\n      var appIdentifier, itemType, ref, sessionSerial, userSerial;\n      appIdentifier = 'C';\n      itemType = 'UC';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      return appIdentifier + userSerial + itemType + 'only';\n    },\n    generateSerialForOfflinePatient: function() {\n      var appIdentifier, itemType, ref, seed, serialGenerator, sessionSerial, userSerial;\n      appIdentifier = 'D';\n      itemType = 'OFFPT';\n      ref = (app.db.find('user'))[0], userSerial = ref.serial, sessionSerial = ref.sessionSerial;\n      serialGenerator = (app.db.find('--serial-generator'))[0];\n      seed = serialGenerator['offline-patient-serial-seed'];\n      serialGenerator['offline-patient-serial-seed'] += 1;\n      app.db.update('--serial-generator', serialGenerator._id, serialGenerator);\n      return appIdentifier + userSerial + sessionSerial + itemType + seed;\n    }\n  };\n\n}).call(this);\n"]}