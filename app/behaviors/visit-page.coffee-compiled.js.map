{"version":3,"sources":["visit-page.coffee","visit-page.js"],"names":["app","behaviors","visitPage","properties","visit","type","Object","notify","value","patient","genericNavigatedIn","params","this","domHost","getPageParams","_makeNewVisit","_loadVisit","_notifyInvalidVisit","_loadPatient","patientSerial","_notifyInvalidPatient","navigatedOut","_saveVisit","db","upsert","_this","arg","serial","showToast","arrowBackButtonPressed","e","navigateToPreviousPage","saveButtonPressed","patientIdentifier","list","find","length","showModalDialog","visitIdentifier","call"],"mappings":"CACA,WAAAA,IAAIC,UAAUC,WAEZC,YAEEC,OACEC,KAAMC,OACNC,QAAQ,EACRC,MAAO,MAETC,SACEJ,KAAMC,OACNC,QAAQ,EACRC,MAAO,OAEXE,mBAAoB,WAClB,GAAAC,EAUA,IAVAA,EAASC,KAACC,QAAQC,gBAEfH,EAAO,MACc,QAAnBA,EAAO,MACRC,KAACG,gBAEDH,KAACI,WAAWL,EAAO,OAErBC,KAACK,sBAEAL,KAACR,MACF,MAAGO,GAAO,QACRC,KAACM,aAAaP,EAAO,SACfC,KAACR,MAAMe,cACbP,KAACM,aAAaN,KAACR,MAAMe,eAErBP,KAACQ,yBAEPC,aAAc,WCIV,MDHFT,MAACR,MAAQ,KACTQ,KAACH,QAAU,MAEba,WAAY,WCUR,MDTFtB,KAAIuB,GAAGC,OAAO,eAAgBZ,KAACR,MAAO,SAAAqB,GCGlC,MDHkC,UAACC,GAAY,GAAAC,ECM7C,ODNkCA,GAADD,EAAAC,OAAYF,EAACrB,MAAMuB,SAAUA,IAA9Bf,OACtCA,KAACC,QAAQe,UAAU,gBAErBC,uBAAwB,SAACC,GCSrB,MDRFlB,MAACC,QAAQkB,0BAEXC,kBAAmB,SAACF,GCUhB,MDTFlB,MAACU,aACDV,KAACiB,0BAEHX,aAAc,SAACe,GACb,GAAAC,EACA,OADAA,GAAOlC,IAAIuB,GAAGY,KAAK,UAAW,SAACT,GAAY,GAAAC,ECYvC,ODZ4BA,GAADD,EAAAC,OAAYA,IAAUM,IACnC,IAAfC,EAAKE,OACNxB,KAACH,QAAUyB,EAAK,GAEhBtB,KAACQ,yBAELA,sBAAuB,WCenB,MDdFR,MAACC,QAAQwB,gBAAgB,6BAE3BrB,WAAY,SAACsB,GACX,GAAAJ,EACA,OADAA,GAAOlC,IAAIuB,GAAGY,KAAK,eAAgB,SAACT,GAAY,GAAAC,ECkB5C,ODlBiCA,GAADD,EAAAC,OAAYA,IAAUW,IACxC,IAAfJ,EAAKE,OACNxB,KAACR,MAAQ8B,EAAK,GAEdtB,KAACK,uBAELA,oBAAqB,WCqBjB,MDpBFL,MAACC,QAAQwB,gBAAgB,8BCwB1BE,KAAK3B","file":"visit-page.coffee-compiled.js","sourcesContent":["\r\napp.behaviors.visitPage = {\r\n \r\n  properties:\r\n\r\n    visit:\r\n      type: Object\r\n      notify: true\r\n      value: null\r\n\r\n    patient:\r\n      type: Object\r\n      notify: true\r\n      value: null\r\n\r\n  genericNavigatedIn: ->\r\n    params = @domHost.getPageParams()\r\n\r\n    if params['visit']\r\n      if params['visit'] is 'new'\r\n        @_makeNewVisit()\r\n      else  \r\n        @_loadVisit params['visit']\r\n    else\r\n      @_notifyInvalidVisit()\r\n\r\n    if @visit\r\n      if params['patient']\r\n        @_loadPatient params['patient']\r\n      else if @visit.patientSerial\r\n        @_loadPatient @visit.patientSerial\r\n      else\r\n        @_notifyInvalidPatient()\r\n\r\n  navigatedOut: ->\r\n    @visit = null\r\n    @patient = null\r\n\r\n  _saveVisit: ->\r\n    app.db.upsert 'doctor-visit', @visit, ({serial})=> @visit.serial is serial\r\n    @domHost.showToast 'Visit Saved'\r\n\r\n  arrowBackButtonPressed: (e)->\r\n    @domHost.navigateToPreviousPage()\r\n\r\n  saveButtonPressed: (e)->\r\n    @_saveVisit()\r\n    @arrowBackButtonPressed()\r\n\r\n  _loadPatient: (patientIdentifier)->\r\n    list = app.db.find 'patient', ({serial})-> serial is patientIdentifier\r\n    if list.length is 1\r\n      @patient = list[0]\r\n    else\r\n      @_notifyInvalidPatient()\r\n\r\n  _notifyInvalidPatient: ->\r\n    @domHost.showModalDialog 'Invalid Patient Provided'\r\n\r\n  _loadVisit: (visitIdentifier)->\r\n    list = app.db.find 'doctor-visit', ({serial})-> serial is visitIdentifier\r\n    if list.length is 1\r\n      @visit = list[0]\r\n    else\r\n      @_notifyInvalidVisit()\r\n\r\n  _notifyInvalidVisit: ->\r\n    @domHost.showModalDialog 'Invalid Visit Provided'\r\n\r\n}","(function() {\n  app.behaviors.visitPage = {\n    properties: {\n      visit: {\n        type: Object,\n        notify: true,\n        value: null\n      },\n      patient: {\n        type: Object,\n        notify: true,\n        value: null\n      }\n    },\n    genericNavigatedIn: function() {\n      var params;\n      params = this.domHost.getPageParams();\n      if (params['visit']) {\n        if (params['visit'] === 'new') {\n          this._makeNewVisit();\n        } else {\n          this._loadVisit(params['visit']);\n        }\n      } else {\n        this._notifyInvalidVisit();\n      }\n      if (this.visit) {\n        if (params['patient']) {\n          return this._loadPatient(params['patient']);\n        } else if (this.visit.patientSerial) {\n          return this._loadPatient(this.visit.patientSerial);\n        } else {\n          return this._notifyInvalidPatient();\n        }\n      }\n    },\n    navigatedOut: function() {\n      this.visit = null;\n      return this.patient = null;\n    },\n    _saveVisit: function() {\n      app.db.upsert('doctor-visit', this.visit, (function(_this) {\n        return function(arg) {\n          var serial;\n          serial = arg.serial;\n          return _this.visit.serial === serial;\n        };\n      })(this));\n      return this.domHost.showToast('Visit Saved');\n    },\n    arrowBackButtonPressed: function(e) {\n      return this.domHost.navigateToPreviousPage();\n    },\n    saveButtonPressed: function(e) {\n      this._saveVisit();\n      return this.arrowBackButtonPressed();\n    },\n    _loadPatient: function(patientIdentifier) {\n      var list;\n      list = app.db.find('patient', function(arg) {\n        var serial;\n        serial = arg.serial;\n        return serial === patientIdentifier;\n      });\n      if (list.length === 1) {\n        return this.patient = list[0];\n      } else {\n        return this._notifyInvalidPatient();\n      }\n    },\n    _notifyInvalidPatient: function() {\n      return this.domHost.showModalDialog('Invalid Patient Provided');\n    },\n    _loadVisit: function(visitIdentifier) {\n      var list;\n      list = app.db.find('doctor-visit', function(arg) {\n        var serial;\n        serial = arg.serial;\n        return serial === visitIdentifier;\n      });\n      if (list.length === 1) {\n        return this.visit = list[0];\n      } else {\n        return this._notifyInvalidVisit();\n      }\n    },\n    _notifyInvalidVisit: function() {\n      return this.domHost.showModalDialog('Invalid Visit Provided');\n    }\n  };\n\n}).call(this);\n"]}